---
# Common parameters for RPM package repositories.
dev_pulp_repository_rpm_repo_common:
  # Download all content from upstream mirror immediately, in case it gets removed.
  policy: immediate
  # Remove content that has been removed from the upstream mirror.
  sync_policy: mirror_complete
  state: present

dev_pulp_repository_rpm_repos: >-
  {%- set dev_repos = [] -%}
  {%- for repo in rpm_package_repos -%}
  {%- set dev_repo = {"name": repo.name, "url": repo.url} -%}
  {%- if "policy" in repo -%}
  {%- set dev_repo = dev_repo | combine({"policy": repo.policy}) -%}
  {%- endif -%}
  {%- if "sync_policy" in repo -%}
  {%- set dev_repo = dev_repo | combine({"sync_policy": repo.sync_policy}) -%}
  {%- endif -%}
  {%- set _ = dev_repos.append(dev_pulp_repository_rpm_repo_common | combine(dev_repo)) -%}
  {%- endfor -%}
  {{ dev_repos }}

# Publication format is a subset of distribution.
dev_pulp_publication_rpm: "{{ dev_pulp_distribution_rpm }}"

# This version is appended to the name of distributions, and used as the last
# part of the path of the directory containing the distribution.
# FIXME: The following version is taken at the time when facts are gathered.
#        Ideally it would relate to the time the repository version was
#        created, since this would ensure they are ordered by the time of the
#        sync, rather than the time of the distribution was created. This
#        matters if we make a distribution for an earlier repository version,
#        when later ones have already been distributed. Alternatively we could
#        forget ordering and use a random string.
dev_pulp_distribution_version: "{{ ansible_date_time.iso8601_basic_short }}"

# Common parameters for RPM package distributions.
dev_pulp_distribution_rpm_common:
  content_guard: development
  state: present

dev_pulp_distribution_rpm: >-
  {%- set dev_dists = [] -%}
  {%- for repo in rpm_package_repos -%}
  {%- if repo.publish | default(true) -%}
  {%- set version = dev_pulp_distribution_version -%}
  {%- set name = repo.distribution_name ~ version -%}
  {%- set base_path = repo.base_path ~ version -%}
  {%- set dev_dist = {"name": name, "repository": repo.name, "base_path": base_path, "short_name": repo.short_name} -%}
  {%- set _ = dev_dists.append(dev_pulp_distribution_rpm_common | combine(dev_dist)) -%}
  {%- endif -%}
  {%- endfor -%}
  {{ dev_dists }}

# Dict mapping repository short names to versions.
# This variable may be set to a set of specific versions via an extra variables
# file.
dev_pulp_distribution_rpm_promote_versions: {}

# Common parameters for promoted RPM package distributions.
dev_pulp_distribution_rpm_promote_common:
  content_guard: release
  state: present

dev_pulp_distribution_rpm_promote: >-
  {%- set dev_dists = [] -%}
  {%- for repo in rpm_package_repos -%}
  {%- if repo.publish | default(true) -%}
  {%- set version = dev_pulp_distribution_rpm_promote_versions.get(repo.short_name, omit) -%}
  {%- set name = repo.distribution_name ~ version -%}
  {%- set base_path = repo.base_path ~ version -%}
  {%- set dev_dist = {"name": name, "base_path": base_path, "short_name": repo.short_name} -%}
  {%- set _ = dev_dists.append(dev_pulp_distribution_rpm_promote_common | combine(dev_dist)) -%}
  {%- endif -%}
  {%- endfor -%}
  {{ dev_dists }}

# Whether to skip existing RPM distributions. If true, new distributions will
# not be created for a publication if any distributions exist for the same
# publication.
dev_pulp_distribution_rpm_skip_existing: true

dev_pulp_content_guard_x509_cert_guards:
  - name: release
    description: "Content-guard for released distributions"
    state: present
  - name: development
    description: "Content-guard for development distributions"
    state: present
